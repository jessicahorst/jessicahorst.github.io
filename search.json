[
  {
    "objectID": "blog-listing.html",
    "href": "blog-listing.html",
    "title": "Data Analytics ",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nspotify_all\n\n\n\n\n\n\n\n\n\n1 min\n\n\n\n\n\n\n  \n\n\n\n\nresturant inspection\n\n\n\n\n\n\n\n\n\n4 min\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\n\n\nOct 27, 2023\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "danl200-hw5-horst-jessica.html",
    "href": "danl200-hw5-horst-jessica.html",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "",
    "text": "library(tidyverse)\nlibrary(hrbrthemes)\nlibrary(skimr)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jessica Horst",
    "section": "",
    "text": "I major in Business Administration at SUNY Geneseo. I am a sophomore and I am a mentor for the Geneseo GOLD program."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Jessica Horst",
    "section": "Education",
    "text": "Education\nState University of New York at Geneseo | Geneseo, NY  Major in Business Administration"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Jessica Horst",
    "section": "Experience",
    "text": "Experience\nKohls | Employee | August 2020 - April 2021  Delta Sonic | Delta Technician | March 2021 - Present"
  },
  {
    "objectID": "posts/restaurant/restaurant.html",
    "href": "posts/restaurant/restaurant.html",
    "title": "resturant inspection",
    "section": "",
    "text": "Let’s analyze the restaurant data:\n\nrestaurant &lt;- read_csv(\"https://bcdanl.github.io/data/DOHMH_NYC_Restaurant_Inspection.csv\")"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "DANL Project",
    "section": "",
    "text": "About this project 👏\nthe purpose of this project is to show our understanding of the Rstudio and Quarto."
  },
  {
    "objectID": "project.html#summary-statistics",
    "href": "project.html#summary-statistics",
    "title": "DANL Project",
    "section": "2.1 Summary Statistics",
    "text": "2.1 Summary Statistics\n\nmpg &lt;- ggplot2::mpg\n\n\n\n\n  \n\n\n\nskim(mpg) %&gt;% \n  select(-n_missing)\n\n\nData summary\n\n\nName\nmpg\n\n\nNumber of rows\n234\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n6\n\n\nnumeric\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\nskim_variable\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmanufacturer\n1\n4\n10\n0\n15\n0\n\n\nmodel\n1\n2\n22\n0\n38\n0\n\n\ntrans\n1\n8\n10\n0\n10\n0\n\n\ndrv\n1\n1\n1\n0\n3\n0\n\n\nfl\n1\n1\n1\n0\n5\n0\n\n\nclass\n1\n3\n10\n0\n7\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ndispl\n1\n3.47\n1.29\n1.6\n2.4\n3.3\n4.6\n7\n▇▆▆▃▁\n\n\nyear\n1\n2003.50\n4.51\n1999.0\n1999.0\n2003.5\n2008.0\n2008\n▇▁▁▁▇\n\n\ncyl\n1\n5.89\n1.61\n4.0\n4.0\n6.0\n8.0\n8\n▇▁▇▁▇\n\n\ncty\n1\n16.86\n4.26\n9.0\n14.0\n17.0\n19.0\n35\n▆▇▃▁▁\n\n\nhwy\n1\n23.44\n5.95\n12.0\n18.0\n24.0\n27.0\n44\n▅▅▇▁▁"
  },
  {
    "objectID": "project.html#mpg-and-a-type-of-cars",
    "href": "project.html#mpg-and-a-type-of-cars",
    "title": "DANL Project",
    "section": "2.2 MPG and a Type of Cars",
    "text": "2.2 MPG and a Type of Cars\nThe following boxplot shows how the distribution of highway MPG (hwy) varies by a type of cars (class) 🚙 🚚 🚐.\n\nggplot(data = mpg) +\n  geom_boxplot(aes(x = class, y = hwy, fill = class),\n               show.legend = F) +\n  labs(x = \"Class\", y = \"Highway\\nMPG\")"
  },
  {
    "objectID": "posts/restaurant/restaurant.html#restaurants",
    "href": "posts/restaurant/restaurant.html#restaurants",
    "title": "resturant inspection",
    "section": "",
    "text": "Let’s analyze the restaurant data:\n\nrestaurant &lt;- read_csv(\"https://bcdanl.github.io/data/DOHMH_NYC_Restaurant_Inspection.csv\")"
  },
  {
    "objectID": "posts/restaurant/restaurant.html#q1a",
    "href": "posts/restaurant/restaurant.html#q1a",
    "title": "resturant inspection",
    "section": "Q1a",
    "text": "Q1a\nWhat are the mean, standard deviation, first quartile, median, third quartile, and maximum of SCORE for each GRADE of restaurants?\n\nrestaurant %&gt;% group_by(GRADE) %&gt;% skim(SCORE) %&gt;% select(-n_missing)\n\n\nData summary\n\n\nName\nPiped data\n\n\nNumber of rows\n17633\n\n\nNumber of columns\n12\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nGRADE\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nGRADE\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nSCORE\nA\n1\n9.26\n3.42\n0\n7\n10\n12\n13\n▁▂▂▅▇\n\n\nSCORE\nB\n1\n21.03\n4.16\n0\n18\n21\n24\n36\n▁▁▇▇▁\n\n\nSCORE\nC\n1\n38.56\n10.83\n0\n31\n36\n44\n86\n▁▇▇▂▁"
  },
  {
    "objectID": "posts/restaurant/restaurant.html#q1b",
    "href": "posts/restaurant/restaurant.html#q1b",
    "title": "resturant inspection",
    "section": "Q1b",
    "text": "Q1b\nHow many restaurants with a GRADE of A are there in NYC?\nHow much percentage of restaurants in NYC are a GRADE of C?\n\nfreq &lt;- as.data.frame( table(restaurant$GRADE) )\nprop &lt;- as.data.frame( 100 * prop.table(table(restaurant$GRADE)) )"
  },
  {
    "objectID": "posts/restaurant/restaurant.html#q1c",
    "href": "posts/restaurant/restaurant.html#q1c",
    "title": "resturant inspection",
    "section": "Q1c",
    "text": "Q1c\nProvide both (1) ggplot code and (2) a simple comment to describe how the distribution of SCORE varies by GRADE and CRITICAL FLAG.\n\nggplot(restaurant) +\n  geom_histogram(aes(x = SCORE), binwidth = 1 ) +\n  facet_wrap( `CRITICAL FLAG` ~ GRADE, scales = 'free' )"
  },
  {
    "objectID": "posts/restaurant/restaurant.html#q1d",
    "href": "posts/restaurant/restaurant.html#q1d",
    "title": "resturant inspection",
    "section": "Q1d",
    "text": "Q1d\nProvide both (1) ggplot code and (2) a simple comment to describe how the proportion of CRITICAL FLAG varies by GRADE and BORO.\n\nggplot(restaurant) +\n  geom_bar(aes(x = `CRITICAL FLAG`,\n               y = after_stat(prop), group = 1)) +\n  facet_grid( GRADE ~ BORO )"
  },
  {
    "objectID": "posts/restaurant/restaurant.html#q1e",
    "href": "posts/restaurant/restaurant.html#q1e",
    "title": "resturant inspection",
    "section": "Q1e",
    "text": "Q1e\nFor the 10 most common CUISINE DESCRIPTION values, find the CUISINE DESCRIPTION value that has the highest proportion of GRADE A.\n\nq2e &lt;- restaurant %&gt;% \n  group_by(`CUISINE DESCRIPTION`) %&gt;% \n  mutate(n = n()) %&gt;% \n  ungroup() %&gt;% \n  filter(dense_rank(-n) &lt;= 10) %&gt;% \n  group_by(`CUISINE DESCRIPTION`, GRADE) %&gt;% \n  count() %&gt;% \n  group_by(`CUISINE DESCRIPTION`) %&gt;% \n  mutate(prop_A = n / sum(n)) %&gt;% \n  filter(GRADE == 'A') %&gt;% \n  arrange(-prop_A)"
  },
  {
    "objectID": "posts/restaurant/restaurant.html#q1f",
    "href": "posts/restaurant/restaurant.html#q1f",
    "title": "resturant inspection",
    "section": "Q1f",
    "text": "Q1f\nFind the 3 most common names of restaurants (DBA) in each BORO. If the third most common DBA values are multiple, please include all the DBA values. Overall, which DBA value is most common in NYC?\n\nq2f &lt;- restaurant %&gt;% \n  select(DBA, BORO) %&gt;% \n  group_by(BORO, DBA) %&gt;% \n  summarize(n = n()) %&gt;% \n  mutate(ranking = dense_rank(-n)) %&gt;% \n  filter(ranking &lt;= 3) %&gt;% \n  arrange(BORO, ranking)\n\nq2f_ &lt;- restaurant %&gt;% \n  group_by(DBA) %&gt;% \n  count() %&gt;% \n  arrange(-n)"
  },
  {
    "objectID": "posts/restaurant/restaurant.html#q1g",
    "href": "posts/restaurant/restaurant.html#q1g",
    "title": "resturant inspection",
    "section": "Q1g",
    "text": "Q1g\nFor all the DBA values that appear in the result of Q1f, find the DBA value that is most likely to commit critical violation.\n\nq2g &lt;- restaurant %&gt;% \n  filter(DBA %in% q2f$DBA) %&gt;% \n  group_by(DBA, `CRITICAL FLAG`) %&gt;% \n  count() %&gt;% \n  group_by(DBA) %&gt;% \n  mutate(lag_n = lag(n),\n         tot = sum(n),\n         prop_crit = lag_n / tot) %&gt;% \n  select(DBA, prop_crit) %&gt;% \n  filter(!is.na(prop_crit)) %&gt;% \n  arrange(-prop_crit)"
  },
  {
    "objectID": "posts/spotify_all/spotify_all.html",
    "href": "posts/spotify_all/spotify_all.html",
    "title": "spotify_all",
    "section": "",
    "text": "Let’s analyze the spotify_all data:\nspotify_all &lt;- read_csv('https://bcdanl.github.io/data/spotify_all.csv')\n\nRows: 198005 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): playlist_name, artist_name, track_name, album_name\ndbl (3): pid, pos, duration_ms\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n##Q1a\nFind the ten most popular song. A value of a song is defined as a combination of a artist_name value and a track_name value. Who are artists for those ten most popular song?\nQ1a &lt;- spotify_all %&gt;% \n  count(artist_name, track_name) %&gt;% \n  arrange(-n) %&gt;% \n  head(10)\n\nQ1a\n\n# A tibble: 10 × 3\n   artist_name      track_name                              n\n   &lt;chr&gt;            &lt;chr&gt;                               &lt;int&gt;\n 1 Drake            One Dance                             143\n 2 Kendrick Lamar   HUMBLE.                               142\n 3 The Chainsmokers Closer                                129\n 4 DRAM             Broccoli (feat. Lil Yachty)           127\n 5 Post Malone      Congratulations                       119\n 6 Migos            Bad and Boujee (feat. Lil Uzi Vert)   117\n 7 KYLE             iSpy (feat. Lil Yachty)               115\n 8 Lil Uzi Vert     XO TOUR Llif3                         113\n 9 Aminé            Caroline                              107\n10 Khalid           Location                              102"
  },
  {
    "objectID": "posts/spotify_all/spotify_all.html#q1b",
    "href": "posts/spotify_all/spotify_all.html#q1b",
    "title": "spotify_all",
    "section": "Q1b",
    "text": "Q1b\nFind the five most popular artist in terms of the number of occurrences in the data.frame, spotify_all. What is the most popular song for each of the five most popular artist?\n\nQ1b &lt;- spotify_all %&gt;% \n  group_by(artist_name) %&gt;% \n  mutate(n_popular_artist = n()) %&gt;% \n  ungroup() %&gt;% \n  mutate( artist_ranking = dense_rank( desc(n_popular_artist) ) ) %&gt;% \n  filter( artist_ranking &lt;= 5) %&gt;% \n  group_by(artist_name, track_name) %&gt;% \n  mutate(n_popular_track = n()) %&gt;% \n  group_by(artist_name) %&gt;% \n  mutate(track_ranking = dense_rank( desc(n_popular_track) ) ) %&gt;% \n  filter( track_ranking &lt;= 2) %&gt;%   # I just wanted to see the top two tracks for each artist\n  select(artist_name, artist_ranking, n_popular_artist, track_name, track_ranking, n_popular_track) %&gt;% \n  distinct() %&gt;% \n  arrange(artist_ranking, track_ranking)\n\nQ1b\n\n# A tibble: 10 × 6\n# Groups:   artist_name [5]\n   artist_name    artist_ranking n_popular_artist track_name  track_ranking\n   &lt;chr&gt;                   &lt;int&gt;            &lt;int&gt; &lt;chr&gt;               &lt;int&gt;\n 1 Drake                       1             2715 One Dance               1\n 2 Drake                       1             2715 Jumpman                 2\n 3 Kanye West                  2             1065 Gold Digger             1\n 4 Kanye West                  2             1065 Stronger                2\n 5 Kendrick Lamar              3             1035 HUMBLE.                 1\n 6 Kendrick Lamar              3             1035 DNA.                    2\n 7 Rihanna                     4              915 Needed Me               1\n 8 Rihanna                     4              915 Work                    2\n 9 The Weeknd                  5              913 Starboy                 1\n10 The Weeknd                  5              913 The Hills               2\n# ℹ 1 more variable: n_popular_track &lt;int&gt;"
  },
  {
    "objectID": "posts/spotify_all/spotify_all.html#q1c",
    "href": "posts/spotify_all/spotify_all.html#q1c",
    "title": "spotify_all",
    "section": "Q1c",
    "text": "Q1c\nProvide both (1) ggplot codes and (2) a couple of sentences to describe the relationship between pos and the ten most popular artists.\n\nQ1c &lt;- spotify_all %&gt;% \n  group_by(artist_name) %&gt;% \n  mutate(n_popular_artist = n()) %&gt;% \n  ungroup() %&gt;% \n  mutate( artist_ranking = dense_rank( desc(n_popular_artist) ) ) %&gt;% \n  filter( artist_ranking &lt;= 10) \n  \n# boxplot\nggplot(Q1c,\n       aes(x = pos, y = fct_reorder(artist_name, -artist_ranking)) ) +\n  geom_boxplot() +\n  stat_summary(\n    fun = mean,\n    color = 'red'\n  )\n\nWarning: Removed 10 rows containing missing values (`geom_segment()`).\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database"
  },
  {
    "objectID": "posts/spotify_all/spotify_all.html#q1d",
    "href": "posts/spotify_all/spotify_all.html#q1d",
    "title": "spotify_all",
    "section": "Q1d",
    "text": "Q1d\nCreate the data.frame with pid-artist level of observations with the following four variables:\npid: playlist id playlist_name: name of playlist artist: name of the track’s primary artist, which appears only once within a playlist n_artist: number of occurrences of artist within a playlist\n\nQ1d &lt;- spotify_all %&gt;% \n  count(pid, playlist_name, artist_name) %&gt;% \n  rename(n_artist = n) %&gt;% \n  arrange(pid, -n_artist, artist_name)"
  }
]